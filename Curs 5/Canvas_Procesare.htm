<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
    <title>Procesare imagine</title>
    <script type="text/javascript" src="http://code.jquery.com/jquery-latest.js"></script>
    <style type="text/css">
        body {
            background-color: Gray;
        }

        canvas /* Poziționare canvas în centrul ferestrei */ {
            position: absolute;
            left: 50%;
            margin-left: -430px; /* jumătate din lățimea canvas-ului */
            top: 50%;
            margin-top: -300px; /* jumătate din înălțimea canvas-ului */
        }
    </style>
</head>
<body>
    <canvas width="860" height="600"></canvas>
    <script type="text/javascript">


        $(function () {
            var canvas = $("canvas")[0];
            var c = canvas.getContext("2d");

            var cW = canvas.width, cH = canvas.height;

            // 1. Încărcare dinamică imagine + pornire timer la terminarea încărcării
            var img = $("<img>").attr("src", "media/Penguins.jpg")
                .load(function () { setInterval(desenare, 30); });

            // 2. Funcția de procesare apelată la fiecare 30ms
            function desenare() {

                // se desenează imaginea încărcată pe canvas
                c.drawImage(img[0], 0, 0);

                // se extrag valorile tututor pixelilor
                // !! OPERAȚIA VA EȘUA DACĂ IMAGINEA DESENATĂ ANTERIOR NU A FOST
                // !! INCĂRCATĂ PRINTR-UN SERVER WEB SAU FACE PARTE
                // !! DINTR-UN DOMENIU DIFERIT DE CEL AL DOCUMENTULUI HTML
                var imageData = c.getImageData(0, 0, cW, cH);
                var pixels = imageData.data;

                for (var y = 0; y < cH; y++) {
                    for (var x = 0; x < cW; x++) {

                        // - se calculează indicele de început pentru pixel
                        // în funcție de coordonate
                        // - fiecărui pixel îi corespund patru valori:
                        //      pixels[i] - Red
                        //      pixels[i+1] - Green
                        //      pixels[i+2] - Blue
                        //      pixels[i+3] - Opacity
                        var i = (y * cW * 4) + x * 4;

                        // se desenează liniile orizontale și verticale
                        if (x == mx) {
                            pixels[i] = 255;
                        }

                        if (y == my) {
                            pixels[i] = 255;
                        }

                        var d = Math.sqrt((x - mx) * (x - mx) + (y - my) * (y - my));
                        if (d > 150) {
                            // pixelii din exteriorul cercului de rază 150 sunt transformați în tonuri de gri
                            // și opacitatea este variată aleator pentru crearea efectului de noise
                            pixels[i] = pixels[i + 1] = pixels[i + 2] = (pixels[i] + pixels[i + 1] + pixels[i + 2]) / 3;
                            pixels[i + 3] = 10 + Math.random() * 100;
                        }
                        else {
                            // opacitatea pentru punctele din interiorul cercului este variată
                            // în funcție de distanța față de centru
                            pixels[i + 3] = 255 - (100 + d / 1.3);
                        }

                    }
                }

                c.putImageData(imageData, 0, 0);
            }

            // 3. Gestiune mouse
            // - coordonatele cursorului sunt salvate în variabilele globale mx și my
            // - variabilele sunt actualizate la fiecare mișcare a mouse-ului
            // - la fiecare 30ms coordonatele sunt ajustate aleator cu + / - 1 pixel
            mx = 0;
            my = 0;
            $(window).mousemove(function (e) {
                mx = e.pageX - canvas.getBoundingClientRect().left;
                my = e.pageY - canvas.getBoundingClientRect().top;
            });

            setInterval(function () {
                mx += Math.round(Math.random() * 2 - 1);
                my += Math.round(Math.random() * 2 - 1);
            }, 30);
        });
    </script>
</body>
</html>
